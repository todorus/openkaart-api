{
    "swagger": "2.0",
    "info": {
        "version": "0.0.1",
        "title": "Openkaart Api",
        "description": "## Structure\nThe API follows a tree like structure, which is mirrored in the url. The final part of the url denotes what type of object will be returned. Its former parts are used as a filter, instructing the API to what other object the results must be related.\n\nFor example, all the Organizations that are active within a Region can be found at the endpoint:\n\n``` GET /regions/1234/organizations ```\n\nThe final part of the url ```/organizations``` tells the API that we are interested in Organization objects. The former part ```/regions/1234``` tells the API that the Organizations that are returned, must be related to the Region with uuid ```1234```.\n\nDo note that this does not reflect the structure of the data, but rather the ways in which it can be queried. Some endpoints may also offer additional filters, like querying by part of the name. Be sure to check the endpoints definition before assuming anything."
    },
    "definitions": {
        "Paging": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "integer",
                    "description": "the current page"
                },
                "total": {
                    "type": "integer",
                    "description": "the total number of pages available for the query"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "The username that the user can be logged into. Must be unique."
                }
            }
        },
        "Region": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "code": {
                    "type": "string",
                    "description": "A code that is unique for that type. For example, a municipality code, or postal code."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Region"
                },
                "type": {
                    "type": "string",
                    "description": "The region type"
                },
                "geometry": {
                    "type": "object"
                }
            }
        },
        "Organization": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the Organization"
                },
                "contact_data": {
                    "$ref": "#/definitions/ContactData"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Location"
                    }
                }
            }
        },
        "Location": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "contact_data": {
                    "$ref": "#/definitions/ContactData"
                },
                "coordinates": {
                    "$ref": "#/definitions/Coordinates"
                }
            }
        },
        "ContactData": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string",
                    "format": "phonenumber"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "address": {
                    "type": "string",
                    "format": "address"
                }
            }
        },
        "Coordinates": {
            "type": "object",
            "properties": {
                "lng": {
                    "type": "number"
                },
                "lat": {
                    "type": "number"
                }
            }
        }
    },
    "parameters": {
        "authorization": {
            "name": "Authorization",
            "in": "header",
            "description": "JWT",
            "type": "string",
            "format": "Bearer [TOKEN]",
            "required": true
        },
        "uuid": {
            "name": "uuid",
            "type": "string",
            "in": "path",
            "description": "unique identifier",
            "required": true
        },
        "organization-uuid": {
            "name": "uuid",
            "type": "string",
            "in": "path",
            "description": "unique identifier of an Organization",
            "required": true
        }
    },
    "paths": {
        "/users/login": {
            "post": {
                "description": "Allows a client to login, using a username passward combination. The api will respond with a JWT when authentication is succesful.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "12 bcrypt cycles, base64 encoded\""
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "JWT": {
                                "type": "string",
                                "description": "Json Web Token"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/regions": {
            "get": {
                "description": "Lists all the regions which satisfy the filter conditions. If no filter options are supplied, all the Regions are returned.",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "the start of a Region name, case insensitive",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "what page to start at (default=1)",
                        "required": false,
                        "default": 1,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "the number of Regions per page (default=10)",
                        "required": false,
                        "default": 10,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "paging": {
                                    "$ref": "#/definitions/Paging"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Region"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Region, consisting out of multiple already defined Regions.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "children": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "uuid"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Region"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/regions/{uuid}": {
            "get": {
                "description": "Shows the Region for that uuid.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Region"
                        }
                    },
                    "404": {
                        "description": "Region Not Found"
                    }
                }
            },
            "put": {
                "description": "Updates an existing Region. All the Regions properties are optional, but at least one must be given within the body.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "the start of a Region name, case insensitive",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "children": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "uuid"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Region"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Region Not Found"
                    }
                }
            },
            "delete": {
                "description": "Removes an existing Region and any connections.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Region Not Found"
                    }
                }
            }
        },
        "/organizations": {
            "post": {
                "description": "Creates a new Organization.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "contact_data": {
                                    "$ref": "#/definitions/ContactData"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "get": {
                "description": "List all the Organizations which satisfy the filter conditions. If no filter options are supplied, all the Organizations are returned.",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "the start of an Organization name, case insensitive",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "what page to start at (default=1)",
                        "required": false,
                        "default": 1,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "the number of Organizations per page (default=10)",
                        "required": false,
                        "default": 10,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "paging": {
                                    "$ref": "#/definitions/Paging"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Organization"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{uuid}": {
            "get": {
                "description": "Shows the Organization for that uuid.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "404": {
                        "description": "Organization Not Found"
                    }
                }
            },
            "put": {
                "description": "Updates an existing Organization.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "contact_data": {
                                    "$ref": "#/definitions/ContactData"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Organization not found"
                    }
                }
            },
            "delete": {
                "description": "Removes an existing Organization and its Locations.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Organization Not Found"
                    }
                }
            }
        },
        "/organizations/{uuid}/locations": {
            "post": {
                "description": "Creates a new Location for the Organization with the matching uuid.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/organization-uuid"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "contact_data": {
                                    "$ref": "#/definitions/ContactData"
                                },
                                "coordinates": {
                                    "$ref": "#/definitions/Coordinates"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Organization not found"
                    }
                }
            },
            "get": {
                "description": "List all the Locations for the specified Organization which satisfy the filter conditions. If no filter options are supplied, all the Locations for the Organization are returned.",
                "parameters": [
                    {
                        "$ref": "#/parameters/organization-uuid"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "the start of an Location name, case insensitive",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "what page to start at (default=1)",
                        "required": false,
                        "default": 1,
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "the number of Locations per page (default=10)",
                        "required": false,
                        "default": 10,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "paging": {
                                    "$ref": "#/definitions/Paging"
                                },
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Location"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/locations/{uuid}": {
            "get": {
                "description": "Shows the Location for that uuid.",
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "404": {
                        "description": "Location Not Found"
                    }
                }
            },
            "put": {
                "description": "Updates an existing Location.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "contact_data": {
                                    "$ref": "#/definitions/ContactData"
                                },
                                "coordinates": {
                                    "$ref": "#/definitions/Coordinates"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            },
            "delete": {
                "description": "Removes an existing Location and any connections.",
                "parameters": [
                    {
                        "$ref": "#/parameters/authorization"
                    },
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Location Not Found"
                    }
                }
            }
        }
    }
}